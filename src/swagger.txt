openapi: 3.0.3
info:
  title: My API Documentation
  description: My API description goes here.
  version: 1.0.0
servers:
  - url: https://localhost
tags:
  - name: Users
    description: Everything about users.
  - name: Products
    description: Everything about products.
  - name: Orders
    description: Everything about orders.
  - name: Category (of Products)
    description: Everything about product's categories.
paths:
  # USERS
  /api/v1/users/register:
    post:
      tags:
        - Users
      summary: Creates user with given body info.
      description: Creates user with given body info.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationBody'
            example:
              username: "SuperUser"
              email: "super_user@email.com"
              password: "123456"
        required: true
      responses:
        '201':
          description: User was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessPostResponse'
        '400':
          description: User already exits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: true
                status: 400
                message: "Username, email and password must be provided to register an user"
          # If I have a very generic response, with a general message, I can directly reference trough "components/responses/", that at the sime time it's referring to an schema. I would just have to add a "description" in the "response" component to provide a little more context and that's it.
          # $ref: '#/components/responses/InvalidRequestBody'
        '409':
          description: User already exits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: true
                status: 409
                message:  "User already exists"
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/login:
    post:
      tags:
        - Users
      summary: Receive JWT Token after successfull login.
      description: Receive JWT Token after successfull login.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationBody'
            example:
              username: "SuperUser"
              email: "super_user@email.com"
              password: "123456"
        required: true
      responses:
        '200':
          description: User logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithStringBody'
        '400':
         description: Multiple reasons for a bad request.
         content:
          application/json:
            schema:
               $ref: '#/components/schemas/BadRequest'
            examples:
              BadRequest_1:
                summary: Username or email not provided.
                value:
                  error: true
                  status: 400
                  message: "You can't login without providing an username or email"
              BadRequest_2:
                summary: Too many attributes.
                value:
                  error: true
                  status: 400
                  message: "You can only do a login with a username or an email, but not both"
              BadRequest_3:
                summary: Password not provided.
                value:
                  error: true
                  status: 400
                  message: "No password was provided"
        '404':
         description: User not found.
         content:
          application/json:
            schema:
               $ref: '#/components/schemas/ErrorResponse'
            example:
              error: true
              status: 404
              message: "This user doesn't exists."
        '500':
         description: Unexpected error.
         content:
          application/json:
            schema:
               $ref: '#/components/responses/InternalServerError'
            examples:
              PasswordDontMatch:
                summary: Password do not match.
                value:
                  error: true
                  status: 500
                  message:  "Password do not match"
              InternalError:
                summary: Internal server error.
                value:
                  error: true
                  status: 500
                  message:  "Internal server error"
  /api/v1/users/{userId}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get user information by their ID.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: string
          example: "1nt3io20_3"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
    put:
      tags:
        - Users
      summary: Update user providing and ID and a token.
      security:
        - bearerAuth: []
      description: Update the user information, if that user is yours.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithStringBody'
              example:
                error: false
                status: 201
                message: "Your profile was updated succesfully"
                body: "The item you wanted to update was indeed updated."
        '401':
          description: Various errors might ocurr regarding authentication.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotAuthorized"
        '500':
          description: Various errors might ocurr.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
              examples:
                InternalError_1:
                  summary: User getting updated doesn't exists.
                  value:
                    error: true
                    status: 500
                    message: "The user you are trying to update doesn't exists"
                InternalError_2:
                  summary: User credentials don't match token info.
                  value:
                    error: true
                    status: 500
                    message: "You are not allowed to do this."
                BadRequest_3:
                  summary: Internal server error.
                  value:
                    error: true
                    status: 500
                    message: "Internal server error"
    delete:
      tags:
        - Users
      summary: Delete user by ID
      security:
        - bearerAuth: []
      description: Deleted user information based on ID provided.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete.
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithStringBody'
              example:
                error: false
                status: 201
                message: "Your profile was deleted succesfully"
                body: "All information was deleted"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Various errors might ocurr.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
              examples:
                InternalError_1:
                  summary: User getting updated doesn't exists.
                  value:
                    error: true
                    status: 500
                    message: "The user you are trying to update doesn't exists"
                InternalError_2:
                  summary: User credentials don't match token info.
                  value:
                    error: true
                    status: 500
                    message: "You are not allowed to do this."
                BadRequest_3:
                  summary: Internal server error.
                  value:
                    error: true
                    status: 500
                    message: "Internal server error"
  # PRODUCTS
  /api/v1/products/:
    get:
      tags:
        - Products
      summary: Get a personalized amount list of products.
      description: Get a personalized amount list of products.
      operationId: listProduct
      parameters:
        - name: limit
          in: query
          description: Number of products you want to receive in a request. If no limit is present by default it will return 15 products.
          required: false
          schema:
            type: integer
          example: 10
        - name: offset
          in: query
          description: Number of products you want to skip at the beginning of the list. If no offset it's provided the default value is 0.
          required: false
          schema:
            type: integer
          example: 5
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Example_1:
                  summary: Limit = 3 and offset = 0.
                  value:
                    error: false
                    status: 200
                    message: "This product is available"
                    body:
                      - category_id: 1
                        name: "Product A"
                        color: "Red"
                        description: "Description of Product A"
                        price: 50
                        quantity: 10
                        image: "image_A.jpg"
                      - category_id: 2
                        name: "Product B"
                        color: "Blue"
                        description: "Description of Product B"
                        price: 60
                        quantity: 5
                        image: "image_B.jpg"
                      - category_id: 3
                        name: "Product C"
                        color: "Green"
                        description: "Description of Product C"
                        price: 70
                        quantity: 20
                        image: "image_C.jpg"
                Example_2:
                  summary: Limit = 3 and offset = 2.
                  value:
                    error: false
                    status: 200
                    message: "This product is available"
                    body:
                      - category_id: 3
                        name: "Product C"
                        color: "Green"
                        description: "Description of Product C"
                        price: 70
                        quantity: 20
                        image: "image_C.jpg"
                      - category_id: 4
                        name: "Product D"
                        color: "Yellow"
                        description: "Description of Product D"
                        price: 80
                        quantity: 15
                        image: "image_D.jpg"
                      - category_id: 5
                        name: "Product E"
                        color: "Purple"
                        description: "Description of Product E"
                        price: 90
                        quantity: 25
                        image: "image_E.jpg"
                Example_3:
                  summary: No limit or offset provided (15 products in ascending order by product's ID).
                  value:
                    error: false
                    status: 200
                    message: "This product is available"
                    body: []
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Products
      summary: Creates a single or multiple products, or an array of products with given body info.
      description: Creates a product with given body info. Notice that the category of the product must exists prior to creating the product. Also, the product or products must be contained inside an array.
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
             type: array
             items:
              $ref: '#/components/schemas/Product'
             minItems: 1
        required: true
      responses:
        '201':
          description: Product/s was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessPostResponse'
              example:
               error: false
               status: 201
               message: "All product/s created"
               body: "Every item/s provided were created."
        '400':
          description: request.body it's missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Products
      summary: Updates a single product based on it's id.
      description: Any attribute of the product can be updated.
      operationId: updateProduct
      requestBody:
        content:
          application/json:
            schema:
             type: array
             items:
              $ref: '#/components/schemas/ProductWithId'
             minItems: 1
        required: true
      responses:
        '200':
          description: Product/s was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ResourceUpdated'
              example:
                error: false
                status: 200
                message: "The product was updated"
                body: "The item you wanted to update was indeed updated."
        '404':
          description: Product was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Various errors might ocurr.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
              examples:
                InternalError_1:
                  summary: The product you tried to deactivate was already inactive and no update was made.
                  value:
                    error: true
                    status: 500
                    message: "No update was made to the product because it has the same state."
                BadRequest_2:
                  summary: Internal server error.
                  value:
                    error: true
                    status: 500
                    message: "Internal server error"
  /api/v1/products/filter:
    get:
      tags:
        - Products
      summary: Get a list of products that meet the name, color or price provided in query params.
      description: Get a list of products that meet the name, color or price provided in query params.
      operationId: filterProduct
      parameters:
        - name: price
          in: query
          description: This will send you the products that have this price or lower.
          required: false
          schema:
            type: integer
          example: 1640
        - name: color
          in: query
          description: Products with certain colour will appear.
          required: false
          schema:
            type: string
          example: "black"
        - name: name
          in: query
          description: Products containing this as part of it's name will be shown.
          required: false
          schema:
            type: integer
          example: "samsung"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
               Example_by_price:
                  summary: Products with price equal to 60 or lower.
                  value:
                    error: false
                    status: 200
                    message: "Products available within the specified price range."
                    body:
                      - category_id: 1
                        name: "Smartphone X"
                        color: "Black"
                        description: "A high-quality smartphone."
                        price: 50
                        quantity: 10
                        image: "smartphone_x.jpg"
                      - category_id: 2
                        name: "Tablet Y"
                        color: "Blue"
                        description: "A versatile tablet."
                        price: 60
                        quantity: 5
                        image: "tablet_y.jpg"
               Example_by_color:
                  summary: Products with color black.
                  value:
                    error: false
                    status: 200
                    message: "Products available in black color."
                    body:
                      - category_id: 1
                        name: "Laptop Z"
                        color: "Black"
                        description: "A powerful black laptop."
                        price: 43
                        quantity: 10
                        image: "laptop_z.jpg"
                      - category_id: 2
                        name: "Headphones A"
                        color: "Space Black"
                        description: "Premium headphones in space black."
                        price: 200
                        quantity: 5
                        image: "headphones_a.jpg"
               Example_by_name:
                  summary: Products with names like 'samsung' in query parameters.
                  value:
                    error: false
                    status: 200
                    message: "Products with names containing 'samsung' are available."
                    body:
                      - category_id: 1
                        name: "Samsung Galaxy S21"
                        color: "Black"
                        description: "The latest Samsung smartphone."
                        price: 599
                        quantity: 10
                        image: "samsung_galaxy_s21.jpg"
                      - category_id: 2
                        name: "Samsung Galaxy Tab S7"
                        color: "Silver"
                        description: "A premium Samsung tablet."
                        price: 499
                        quantity: 15
                        image: "samsung_galaxy_tab_s7.jpg"
               Example_by_multiple_criteria:
                  summary: Products meeting multiple criteria.
                  value:
                    error: false
                    status: 200
                    message: "Example of successful response 5"
                    body:
                      - category_id: 1
                        name: "Samsung Galaxy S21"
                        color: "Black"
                        description: "Description of Samsung Galaxy S21"
                        price: 599
                        quantity: 10
                        image: "samsung_galaxy_s21.jpg"
                      - category_id: 2
                        name: "Samsung 4K QLED TV"
                        color: "Black"
                        description: "Description of Samsung 4K QLED TV"
                        price: 899
                        quantity: 5
                        image: "samsung_4k_qled_tv.jpg"
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/products/{productId}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Get product information by their ID.
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve.
          required: true
          schema:
            type: string
          example: "1nt3io20_3"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
               error: false
               status: 200
               message: "This product is available"
               body:
                - category_id: 1
                  name: "Smartphone X"
                  color: "Black"
                  description: "A high-quality smartphone."
                  price: 50
                  quantity: 10
                  image: "smartphone_x.jpg"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Products
      summary: Deactivates a product so it can't be bought, by it's product ID (note that the product itself won't be deleted).
      description: Deactivates a product so it can't be bought, by it's product ID (note that the product itself won't be deleted).
      operationId: deactivateProduct
      parameters:
        - name: productId
          in: path
          description: ID of the product to deactivate.
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithStringBody'
              example:
                error: false
                status: 200
                message: "Product deactivated"
                body: "The item you wanted to update was indeed updated."
        '404':
          description: Product was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Various errors might ocurr.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
              examples:
                InternalError_1:
                  summary: The product you tried to deactivate was already inactive and no update was made.
                  value:
                    error: true
                    status: 500
                    message: "No update was made to the product because it has the same state."
                InternalError_2:
                  summary: Internal server error.
                  value:
                    error: true
                    status: 500
                    message: "Internal server error"
  # CATEGORY
  /api/v1/categories/:
    get:
      tags:
        - Categories
      summary: Get a personalized amount list of categories.
      description: Get a personalized amount list of categories.
      operationId: listCategory
      parameters:
        - name: limit
          in: query
          description: Number of categories you want to receive in a request. If no limit is present by default it will return 15 categories.
          required: false
          schema:
            type: integer
          example: 10
        - name: offset
          in: query
          description: Number of categories you want to skip at the beginning of the list. If no offset it's provided the default value is 0.
          required: false
          schema:
            type: integer
          example: 5
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
                Example_1:
                  summary: Limit = 3 and offset = 0.
                  value:
                    error: false
                    status: 200
                    message: "This is the list of categories"
                    body:
                    - id: 1
                      name: "Smartphones"
                      description: "Mobile devices with advanced features."
                      active: 1
                      created_at: "2023-09-24T16:45:30.000Z"
                    - id: 2
                      name: "Laptops"
                      description: "Portable computers for work and entertainment."
                      active: 1
                      created_at: "2023-09-24T16:45:30.000Z"
                    - id: 3
                      name: "Gaming Consoles"
                      description: "Devices for playing video games."
                      active: 1
                      created_at: "2023-09-24T16:45:30.000Z"
                Example_2:
                  summary: Limit = 3 and offset = 2.
                  value:
                    error: false
                    status: 200
                    message: "This is the list of categories"
                    body:
                    - id: 3
                      name: "Gaming Consoles"
                      description: "Devices for playing video games."
                      active: 1
                      created_at: "2023-09-24T16:45:30.000Z"
                    - id: 4
                      name: "TVs"
                      description: "Televisions for immersive entertainment."
                      active: 1
                      created_at: "2023-09-24T16:45:30.000Z"
                    - id: 5
                      name: "Cameras"
                      description: "Devices for capturing photos and videos."
                      active: 1
                      created_at: "2023-09-24T16:45:30.000Z"
                Example_3:
                  summary: No limit or offset provided (15 products in ascending order by product's ID).
                  value:
                    error: false
                    status: 200
                    message: "This is the list of categories"
                    body: []
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Categories
      summary: Creates a single or multiple categories with given body info.
      description: Creates category/s with given body info. The category or categories must be contained inside an array.
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
             type: array
             items:
              $ref: '#/components/schemas/ProductCategory'
             minItems: 1
        required: true
      responses:
        '201':
          description: Category/s was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessPostResponse'
              example:
               error: false
               status: 201
               message: "All product/s created"
               body: "Every item/s provided were created."
        '400':
          description: request.body it's missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Categories
      summary: Updates a single product based on it's id.
      description: Any attribute of the category can be updated.
      operationId: updateCategorie
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCategory'
        required: true
      responses:
        '200':
          description: Category/s was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ResourceUpdated'
              example:
                error: false
                status: 200
                message: "The category was updated"
                body: "The item you wanted to update was indeed updated."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                error: false
                status: 400
                message: "You didn't provide a body"
        '404':
          description: Category was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Various errors might ocurr.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
              examples:
                InternalError_1:
                  summary: The category doesn't exists.
                  value:
                    error: true
                    status: 500
                    message: "The category you are searching for doesn't exists."
                InternalError_2:
                  summary: No update was made.
                  value:
                    error: true
                    status: 500
                    message: "No update was made to the category because it has the same state."
                InternalError_3:
                  summary: Internal server error.
                  value:
                    error: true
                    status: 500
                    message: "Internal server error"
  /api/v1/categories/filter:
    get:
      tags:
        - Categories
      summary: Get a list of categories that meet the name provided in query params.
      description: Get a list of categories that meet the name provided in query params.
      operationId: filterCategory
      parameters:
        - name: name
          in: query
          description: This will send you the categories that have name.
          required: true
          schema:
            type: string
          example: "laptop"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              examples:
               Example_by_name:
                  summary: Categories with name like "Smartphones".
                  value:
                    error: false
                    status: 200
                    message: "Category/ies available..."
                    body:
                      - id: 1
                        name: "Smartphones"
                        description: "Mobile devices with advanced features."
                        active: 1
                        created_at: "2023-09-24T10:57:28.000Z"
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              example:
                error: true
                status: 400
                message: "Name of the category must be provided in order to filter"
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/categories/{categoryId}:
    get:
      tags:
        - Categories
      summary: Get category by ID
      description: Get category information by their ID.
      operationId: getCategories
      parameters:
        - name: categoryId
          in: path
          description: ID of the category to retrieve.
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCategory'
              example:
               error: false
               status: 200
               message: "This category is available"
               body:
                - id: 2
                  name: "Laptops"
                  description: "Portable computers for work and entertainment."
                  created_at: "2023-09-24T10:57:28.000Z"
        '404':
          description: Category not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Categories
      summary: Deactivates a category by it's category ID (note that the category itself won't be deleted).
      description: Deactivates a category by it's category ID (note that the category itself won't be deleted).
      operationId: deactivateCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the product to deactivate.
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithStringBody'
              example:
                error: false
                status: 200
                message: "Category deactivated"
                body: "Category deactivated"
        '404':
          description: Product was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Various errors might ocurr.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
              examples:
                InternalError_1:
                  summary: The product you tried to deactivate was already inactive and no update was made.
                  value:
                    error: true
                    status: 500
                    message: "No update was made to the product because it has the same state."
                InternalError_2:
                  summary: Category doesn't exists.
                  value:
                    error: true
                    status: 500
                    message: "The category you are searching for doesn't exists."
                InternalError_3:
                  summary: Internal server error.
                  value:
                    error: true
                    status: 500
                    message: "Internal server error"
  # ORDERS
  /api/v1/orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order by ID
      description: Get order information by their ID.
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order to retrieve.
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
               error: false
               status: 200
               message: "This order is available"
               body:
                - id: 1
                  user_id: "abcd"
                  total_amount:  2499.97
                  status: "received"
                  modified_at: "2023-05-03T22:00:00.000Z"
                  created_at: "2023-05-03T22:00:00.000Z"
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/orders/:
    get:
      tags:
        - Orders
      summary: Get a personalized amount list of products.
      description: Get a personalized amount list of products.
      operationId: listOrders
      parameters:
        - name: userId
          in: query
          description: Retrieves every order a specific consumer has.
          required: false
          schema:
            type: string
          example: "fsib&31_2A"
      responses:
        '200':
          description: Provides all the orders this user has, and every product (or "OrderItem") included in each order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                error: false
                status: 200
                message: "Succesfull call, here are the results."
                body:
                  - id: 3
                    user_id: "abcde"
                    total_amount: 799.98
                    status: "preparing"
                    created_at: "Sun, 24 Sep 2023 10:57:28 GMT"
                    products:
                      - order_item_id: 5
                        name: "Samsung QLED 4K TV"
                        color: "Titan Gray"
                        quantity: 1
                        subtotal: 1299.99
                      - order_item_id: 6
                        name: "Canon EOS R5"
                        color: "Black"
                        quantity: 1
                        subtotal: 249.99
                  - id: 4
                    user_id: "abcde"
                    total_amount: 849.98
                    status: "shipping"
                    created_at: "Sun, 24 Sep 2023 10:57:28 GMT"
                    products:
                      - order_item_id: 7
                        name: "Apple MacBook Air"
                        color: "Silver"
                        quantity: 1
                        subtotal: 999.99
                      - order_item_id: 8
                        name: "Sony WH-1000XM4"
                        color: "Silver"
                        quantity: 1
                        subtotal: 99.99
        '404':
          description: User's orders weren't found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Orders
      summary: Creates a single order multiple products.
      description: Creates a single order multiple products. Notice that the total_amount of the order has to be calculated on the client side, adding up all the individual cost of all the products contained in the order.
      requestBody:
        content:
          application/json:
            schema:
             type: array
             items:
              $ref: '#/components/schemas/OrderCreationModel'
             minItems: 1
            example:
                user_id: "wbwei231A"
                total_amount: 3000
                products:
                  - order_item_id: 1
                    product_id: 1
                    quantity: 1
                    subtotal: 1000
                  - order_item_id: 2
                    product_id: 2
                    quantity: 1
                    subtotal: 1500
                  - order_item_id: 3
                    product_id: 3
                    quantity: 1
                    subtotal: 500
        required: true
      responses:
        '201':
          description: Order was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessPostResponse'
              example:
               error: false
               status: 201
               message: "Order created"
               body: "All order's items were assigned to order ${orderId}"
        '400':
          description: request.body it's missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
                BadRequest_1:
                  summary: user_id wasn't provided
                  value:
                    error: true
                    status: 400
                    message: "An user id and the total amount of the order is needed to create it."
                BadRequest_2:
                  summary: No product associated to order.
                  value:
                    error: true
                    status: 400
                    message: "There must be at least one product to create an order."
                BadRequest_3:
                  summary: user_id wasn't provided
                  value:
                    error: true
                    status: 400
                    message: "The 'order_id' property must exist and  be null."
                BadRequest_4:
                  summary: No product associated to order.
                  value:
                    error: true
                    status: 400
                    message: "There must be at least one product to create an order."
        '500':
          description: request.body it's missing.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/InternalServerError'
              examples:
                InternalError_1:
                  summary: User doesn't exists.
                  value:
                    error: true
                    status: 500
                    message: "You can't create an order to an user that doesn't exists."
                InternalError_2:
                  summary: Order couldn't be created.
                  value:
                    error: true
                    status: 500
                    message: "Failed to create the order."
                InternalError_3:
                  summary: Order items couldn't be created.
                  value:
                    error: true
                    status: 500
                    message:  "Something wrong ocurred when creating the order's item/s."
    put:
      tags:
        - Orders
      summary: Updates an order status.
      description: Updates an order status. The only thing that can be updated from orders are their status.
      operationId: updateOrder
      requestBody:
        content:
          application/json:
            schema:
             $ref: "#/components/schemas/OrderStatusChange"
        required: true
      responses:
        '200':
          description: Product/s was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ResourceUpdated'
              example:
                error: false
                status: 200
                message: "The product was updated"
                body: "The item you wanted to update was indeed updated."
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
              examples:
               BadRequest_1:
                summary: Not enough data provided.
                value:
                  error: true
                  status: 400
                  message: "You didn't provide enough data to update the order"
               BadRequest_2:
                summary: Status provided it's incorrect.
                value:
                  error: true
                  status: 400
                  message: "Invalid order status"
        '404':
          description: Order was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Various errors might ocurr.
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
              examples:
                InternalError_1:
                  summary: Order doesn't exist.
                  value:
                    error: true
                    status: 500
                    message: "No order was found"
                BadRequest_2:
                  summary: Internal server error.
                  value:
                    error: true
                    status: 500
                    message: "Internal server error"
  /api/v1/orders/filter:
    get:
      tags:
        - Orders
      summary: Get a list of products that meet the name, color or price provided in query params.
      description: Get a list of products that meet the name, color or price provided in query params.
      operationId: filterOrders
      parameters:
        - name: productName
          in: query
          description: This will send you the orders that contain this product's name.
          required: true
          schema:
            type: integer
          example: 'Samsung'
        - name: itemCreatedAt
          in: query
          description: Orders than contain a product created in a specific date will be shown. The format required is 'YYYY-MM-DD'
          required: false
          schema:
            type: string
          example: "2023-05-05"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithProducts'
              examples:
                Example_by_name:
                  summary: Products with name like Samsung.
                  value:
                    error: false
                    status: 200
                    message: "Order/s available..."
                    body:
                      - id: 6
                        user_id: "abcdf"
                        total_amount: 599.99
                        status: "payment_pending"
                        created_at: "Sun, 24 Sep 2023 10:57:28 GMT"
                        products:
                          - order_item_id: 12
                            name: "Samsung Galaxy Watch 4"
                            color: "Phantom Black"
                            quantity: 1
                            subtotal: 299.99
                      - id: 2
                        user_id: "abcd"
                        total_amount: 2499.97
                        status: "received"
                        created_at: "Sun, 24 Sep 2023 10:57:28 GMT"
                        products:
                          - order_item_id: 3
                            name: "Samsung Galaxy S21 Ultra"
                            color: "Phantom Black"
                            quantity: 1
                            subtotal: 1199.99
                Example_by_itemCreationDate:
                  summary: Order item's created on a specific date.
                  value:
                    error: false
                    status: 200
                    message: "Order/s available..."
                    body:
                      - id: 3
                        user_id: "abcde"
                        total_amount: 799.98
                        status: "preparing"
                        created_at: "Sun, 24 Sep 2023 10:57:28 GMT"
                        products:
                          - order_item_id: 5
                            name: "Samsung QLED 4K TV"
                            color: "Titan Gray"
                            quantity: 1
                            subtotal: 1299.99
                Example_by_multiple_criteria:
                  summary: Products meeting multiple criteria.
                  value:
                    error: false
                    status: 200
                    message: "Order/s available..."
                    body:
                      - id: 6
                        user_id: "abcdf"
                        total_amount: 599.99
                        status: "payment_pending"
                        created_at: "Sun, 24 Sep 2023 10:57:28 GMT"
                        products:
                          - order_item_id: 12
                            name: "Samsung Galaxy Watch 4"
                            color: "Phantom Black"
                            quantity: 1
                            subtotal: 299.99
                      - id: 3
                        user_id: "abcde"
                        total_amount: 799.98
                        status: "preparing"
                        created_at: "Sun, 24 Sep 2023 10:57:28 GMT"
                        products:
                          - order_item_id: 5
                            name: "Samsung QLED 4K TV"
                            color: "Titan Gray"
                            quantity: 1
                            subtotal: 1299.99
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                Example_missing_properties:
                  summary: Missing 'productName' and 'itemCreatedAt' properties in query params.
                  value:
                    error: true
                    status: 400
                    message: "You must provide either 'productName' or 'itemCreatedAt' properties in query params to perform this action."

                Example_invalid_date_format:
                  summary: Invalid date format in 'itemCreatedAt' query param.
                  value:
                    error: true
                    status: 400
                    message: "Invalid date format. Please use the format 'YYYY-MM-DD'."
        '404':
          description: There are no orders with the name or creation date specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
   User:
     type: object
     properties:
       username:
         type: string
         format: string
         example: "John Doe"
       email:
         type: string
         format: email
         example: "John Doe"
       avatar:
         type: string
         format: url
         example: "http://to_cool_image.com"
   UserRegistrationBody:
     type: object
     properties:
       username:
         type: string
         format: string
         example: "John Doe"
       email:
         type: string
         format: email
         example: "John Doe"
       password:
         type: string
         format: string
         example: "securepassword1234"
   Product:
      type: object
      properties:
        category_id:
          type: integer
          description: The ID of the product's category.
          example: 1
        name:
          type: string
          description: The name of the product.
          example: "iPhone 13 Pro"
        color:
          type: string
          description: The color of the product.
          example: "Space Black"
        description:
          type: string
          description: A description of the product.
          example: "The latest flagship smartphone from Apple."
        price:
          type: number
          description: The price of the product.
          example: 127
        quantity:
          type: integer
          description: The quantity of the product available.
          example: 50
        image:
          type: string
          description: The URL of the product's image.
          example: ""
   ProductWithId:
      type: object
      properties:
        id:
          type: integer
          description: Product's ID.
          example: 1
        category_id:
          type: integer
          description: The ID of the product's category.
          example: 1
        name:
          type: string
          description: The name of the product.
          example: "iPhone 13 Pro"
        color:
          type: string
          description: The color of the product.
          example: "Space Black"
        description:
          type: string
          description: A description of the product.
          example: "The latest flagship smartphone from Apple."
        price:
          type: number
          description: The price of the product.
          example: 127
        quantity:
          type: integer
          description: The quantity of the product available.
          example: 50
        image:
          type: string
          description: The URL of the product's image.
          example: ""
   Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: string
          example: "abcd"
        total_amount:
          type: number
          example: 3199.97
        status:
          type: string
          enum:
           - 'payment_pending'
           - 'received'
           - 'preparing'
           - 'shipping'
           - 'delivered'
           - 'cancelled'
        modified_at:
          type: string
          format: date-time
          example: "2023-04-30T22:00:00.000Z"
        created_at:
          type: string
          format: date-time
          example: "2023-09-24T10:57:28.000Z"
   OrderItem:
      type: object
      properties:
        order_item_id:
          type: integer
        name:
          type: string
        color:
          type: string
        quantity:
          type: integer
        subtotal:
          type: number
   OrderWithProducts:
        type: object
        properties:
          id:
            type: integer
            example: 1
          user_id:
            type: string
            example: "abcd"
          total_amount:
            type: number
            example: 3199.97
          status:
            type: string
            enum:
             - 'payment_pending'
             - 'received'
             - 'preparing'
             - 'shipping'
             - 'delivered'
          created_at:
            type: string
            format: date-time
            example: "Sun, 24 Sep 2023 10:57:28 GMT"
          products:
            type: array
            items:
              $ref: '#/components/schemas/OrderItem'
   OrderItemCreationModel:
      type: object
      properties:
        order_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1
        subtotal:
          type: number
          example: 3000
   OrderCreationModel:
        type: object
        properties:
          user_id:
            type: string
            example: "wbwei231A"
          total_amount:
            type: integer
            example: 3000
          products:
            type: array
            items:
             $ref: '#/components/schemas/OrderItemCreationModel'
   OrderStatusChange:
        type: object
        properties:
          order_id:
            type: string
            example: 3
          status:
            type: string
            enum:
             - 'payment_pending'
             - 'received'
             - 'preparing'
             - 'shipping'
             - 'delivered'
            example: 'received'
   ProductCategory:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Smartphones"
        description:
          type: string
          example: "Mobile devices with advanced features."
        created_at:
          type: string
          format: date-time
          example: "2023-09-24T10:57:28.000Z"
   SuccessResponse:
      type: object
      properties:
        error:
          type: boolean
          description: Indicates whether an error occurred or not.
          example: false
        status:
          type: integer
          description: HTTP status code.
          example: 200
        message:
          type: string
          description: A message describing the response.
          example: "This request was successfull, here is some relevant information about this request:"
        body:
          type: array
          description: An array of objects that can vary depending on the specific request. For example, when doing request to getUsers you will receive and object with their email, username and avatar.
          items:
            type: object
   SuccessResponseWithStringBody:
      type: object
      properties:
        error:
          type: boolean
          description: Indicates whether an error occurred or not.
          example: false
        status:
          type: integer
          description: HTTP status code.
          example: 200
        message:
          type: string
          description: A message describing the response.
          example: "This request was successfull, here is some relevant information about this request:"
        body:
          type: string
          description: A message about the operation or a token, in case of loggin an user.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
   SuccessPostResponse:
      type: object
      properties:
        error:
          type: boolean
          description: Indicates whether an error occurred or not.
          example: false
        status:
          type: integer
          description: HTTP status code.
          example: 201
        message:
          type: string
          description: A message describing the response.
          example: "This request was successfull, here is some relevant information about this request:"
        body:
          type: array
          description: An array of objects that can vary depending on the specific request. For example, when doing request to getUsers you will receive and object with their email, username and avatar.
          items:
            type: object
   ErrorResponse:
     type: object
     properties:
       error:
         type: boolean
         description: Indicates whether an error occurred or not.
         example: true
       status:
         type: integer
         description: HTTP status code.
         example: 500
       message:
         type: string
         description: A message describing what's the cause of the error. It varies a lot depending on the endpoint called and the different bodies provided.
         example: "Somewthing wrong ocurred, please try again."
   BadRequest:
       type: object
       properties:
         error:
           type: boolean
           description: Indicates whether an error occurred or not.
           example: true
         status:
           type: integer
           description: HTTP status code.
           example: 400
         message:
           type: string
           description: request.body didn't meet the criteriah for this endpoint.
           example: "The attributes you must passed are X and Y and must have these types..."
   NotFoundResponse:
       type: object
       properties:
         error:
           type: boolean
           description: Indicates whether an error occurred or not.
           example: true
         status:
           type: integer
           description: HTTP status code.
           example: 404
         message:
           type: string
           description: The resource you were searching for wasn't found.
           example: "The resource X wasn't found or doesn't exists."
   NotAuthorized:
       type: object
       properties:
         error:
           type: boolean
           description: Indicates whether an error occurred or not.
           example: true
         status:
           type: integer
           description: HTTP status code.
           example: 401
         message:
           type: string
           description: You are not allowed to do this. Reasons may vary, such as invalid token, no token provided, credentials not matching with the token info, etc...
           example: "This token or authorization was invalid."
  responses:
   ResourceCreated:
     description: The resource provided on the request was created. (Personalized message depending on endpoint called)
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/SuccessResponse"
   ResourceUpdated:
     description: The resource provided on the request was updated.
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/SuccessResponse"
   InvalidRequestBody:
     description: Something about the request body sent wasn't provided or the properties didn't matcht the types required.
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/ErrorResponse"
   ResourceAlreadyExists:
     description: The resource you've tried to create (for example, a username with the same email you've provided) already exists and can't be created.
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/ErrorResponse"
   InternalServerError:
     description: There was an unexpected error during the request and couldn't perform the action.
     content:
      application/json:
       schema:
        $ref: "#/components/schemas/ErrorResponse"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
