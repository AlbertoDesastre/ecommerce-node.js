openapi: 3.0.3
info:
  title: My API Documentation
  description: My API description goes here.
  version: 1.0.0
servers:
  - url: https://localhost
tags:
  - name: Users
    description: Everything about users.
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: Products
    description: Everything about products.
paths:
  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get user information by their ID.
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user.
      operationId: createUser
      requestBody:
        description: New user details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Get user information by their ID.
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: ID of the user to retrieve.
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - Users
      summary: Update an existing user
      description: Update an existing user by ID.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: ID of the user to update.
          required: true
          schema:
            type: string
          example: "1"
      requestBody:
        description: Updated user details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '404':
          description: User not found
    delete:
      tags:
        - Users
      summary: Delete a user by ID
      description: Delete a user by their ID.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: ID of the user to delete.
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
  /api/v1/products:
    get:
      tags:
        - Products
      summary: Get a list of products
      description: Get a list of all products.
      operationId: getProducts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags:
        - Products
      summary: Create a new product
      description: Create a new product.
      operationId: createProduct
      requestBody:
        description: New product details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /api/v1/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Get product information by its ID.
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: ID of the product to retrieve.
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      tags:
        - Products
      summary: Update an existing product
      description: Update an existing product by ID.
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          description: ID of the product to update.
          required: true
          schema:
            type: string
          example: "1"
      requestBody:
        description: Updated product details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
        '404':
          description: Product not found
    delete:
      tags:
        - Products
      summary: Delete a product by ID
      description: Delete a product by its ID.
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: ID of the product to delete.
          required: true
          schema:
            type: string
          example: "1"
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "1"
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    Product:
      type: object
      properties:
        id:
          type: string
          example: "1"
        name:
          type: string
          example: Sample Product
        description:
          type: string
          example: This is a sample product description.
        price:
          type: number
          format: float
          example: 19.99
        quantity:
          type: integer
          format: int32
          example: 10
        active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2023-09-09T12:00:00Z"
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
